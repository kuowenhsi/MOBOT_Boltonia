?pca
prcomp
devtools::install_github("tpbilton/GUSMap")
1+1
library(GENESPACE)
runwd <- file.path("/Users/kuowenhsi/testGenespace")
make_exampleDataDir(writeDir = runwd)
list.files(runwd, recursive = T, full.names = F)
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "orthofinder",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "orthofinder",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
check_orthofinderInstall <- function(path, verbose = TRUE){
if(is.na(path) || is.null(path)){
path <- NA
}else{
path <- path.expand(path)
wh <- Sys.which(as.character(path))
ex <- file.exists(path)
if(!ex && wh == ""){
path <- NA
}else{
ver <- tryCatch(
suppressWarnings(system2(path, "-h", stdout = TRUE, stderr = TRUE)),
error = function(err) NA)
if(!grepl("OrthoFinder", ver[2]) || is.na(ver) || length(ver) == 1){
path <- NA
}else{
ver <- strsplit(ver[2], " ")[[1]][3]
vern <- strsplit(ver, ".", fixed = T)[[1]]
vern <- as.numeric(sprintf("%s.%s%s", vern[1], vern[2], vern[3]))
if(vern < 2.52)
warning(sprintf("Orthofinder >= 2.5.2 must be installed (path is to version %s)\n\tAssuming orthofinder will be run outside of R with v2.5.2 or later\n", ver))
}
}
}
return(path)
}
check_orthofinderInstall("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin")
path = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin"
path <- path.expand(path)
wh <- Sys.which(as.character(path))
ex <- file.exists(path)
wh <- Sys.which(as.character(path))
?Sys.which
Sys.which("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin")
Sys.which("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder")
check_orthofinderInstall("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder")
check_orthofinderInstall("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder")
path = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder"
path <- path.expand(path)
wh <- Sys.which(as.character(path))
ex <- file.exists(path)
ver <- tryCatch(
suppressWarnings(system2(path, "-h", stdout = TRUE, stderr = TRUE)),
error = function(err) NA)
ver
system2(path, "-h", stdout = TRUE, stderr = TRUE))
system2(path, "-h", stdout = TRUE, stderr = TRUE)
system2(path, "-h")
system2("/Users/kuowenhsi/OrthoFinder/orthofinder.py", "-h")
system2("/Users/kuowenhsi/OrthoFinder/orthofinder.py", "-h")
citation()
library(tidyverse)
setwd("/Users/kuowenhsi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/MOBOT/MOBOT_Boltonia")
list.files()
list.files(path = "./data")
pheno_data <- read_csv("Boltonia_Phenotype_data_20240612.csv")
pheno_data <- read_csv("./data/Boltonia_Phenotype_data_20240612.csv")
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")
View(mid_data)
View(pheno_data)
colnames(mid_data)
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)
list.files(path = "./data")
LCMS_data <- read_csv("Boltonia_LCMS_20240624.csv")
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")
View(LCMS_data)
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
View(mid_data)
?separate
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))%>%
select(-Accession, -Planting)
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))%>%
select(-Accession, -Planting)%>%
select(MaternalLine, everything())
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))
View(merged_data)
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))
View(merged_data)
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
filter(is.na(TemporaryID))
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
filter(is.na(MaternalLine))
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
filter(is.na(Id))
View(merged_data)
pheno_data <- read_csv("./data/Boltonia_Phenotype_data_20240612.csv")
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))%>%
select(-Accession, -Planting)%>%
select(MaternalLine, everything())
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
filter(is.na(Id))
pheno_data <- read_csv("./data/Boltonia_Phenotype_data_20240612.csv")
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))%>%
select(-Accession, -Planting)%>%
select(MaternalLine, everything())
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
filter(is.na(Id))
View(merged_data)
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
View(mid_data)
View(merged_data)
pheno_data <- read_csv("./data/Boltonia_Phenotype_data_20240612.csv")
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))%>%
select(-Accession, -Planting)%>%
select(MaternalLine, everything())
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
filter(is.na(Id))
View(merged_data)
library(tidyverse)
setwd("/Users/kuowenhsi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/MOBOT/MOBOT_Boltonia")
list.files()
list.files(path = "./data")
pheno_data <- read_csv("./data/Boltonia_Phenotype_data_20240612.csv")
mid_data <- read_csv("./data/Boltonia_tag_merged.csv")%>%
select(TemporaryID, MaternalLine, PlantingDate, FirstLeafDate, TransplantDate)%>%
separate(col = MaternalLine, into = c("MaternalLine", "FlowerHead"), sep = " ")
LCMS_data <- read_csv("./data/Boltonia_LCMS_20240624.csv")%>%
mutate(MaternalLine = str_c(Accession, Planting, sep = "-"))%>%
select(-Accession, -Planting)%>%
select(MaternalLine, everything())
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
filter(is.na(Id))
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")
View(merged_data)
colnames(merged_data)
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
select("MaternalLine", "FlowerHead", "PlantingDate","FirstLeafDate","TransplantDate","Id")
merged_data <- pheno_data %>%
left_join(mid_data, by = c("label" = "TemporaryID"))%>%
left_join(LCMS_data, by = "MaternalLine")%>%
select("MaternalLine", "FlowerHead", "PlantingDate","FirstLeafDate","TransplantDate","Id","Country","State","County", "Latitude", "Longitude","Locality","Location Details", everything())
write_csv(merged_data, "./data/Boltonia_merged_data_20240626.csv")
