?pca
prcomp
devtools::install_github("tpbilton/GUSMap")
1+1
library(GENESPACE)
runwd <- file.path("/Users/kuowenhsi/testGenespace")
make_exampleDataDir(writeDir = runwd)
list.files(runwd, recursive = T, full.names = F)
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "orthofinder",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "orthofinder",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
gpar <- init_genespace(
genomeIDs = c("human","chimp","rhesus"),
speciesIDs = c("human","chimp","rhesus"),
versionIDs = c("human","chimp","rhesus"),
outgroup = NULL,
ploidy = rep(1,3),
diamondMode = "fast",
orthofinderMethod = "fast",
wd = runwd,
orthofinderInBlk = FALSE,
overwrite = F,
verbose = T,
nCores = 4,
minPepLen = 50,
gffString = "gff",
pepString = "pep",
path2orthofinder = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin",
path2diamond = "diamond",
path2mcscanx = "/Users/kuowenhsi/Applications/MCScanX",
rawGenomeDir = file.path(runwd, "rawGenomes"))
check_orthofinderInstall <- function(path, verbose = TRUE){
if(is.na(path) || is.null(path)){
path <- NA
}else{
path <- path.expand(path)
wh <- Sys.which(as.character(path))
ex <- file.exists(path)
if(!ex && wh == ""){
path <- NA
}else{
ver <- tryCatch(
suppressWarnings(system2(path, "-h", stdout = TRUE, stderr = TRUE)),
error = function(err) NA)
if(!grepl("OrthoFinder", ver[2]) || is.na(ver) || length(ver) == 1){
path <- NA
}else{
ver <- strsplit(ver[2], " ")[[1]][3]
vern <- strsplit(ver, ".", fixed = T)[[1]]
vern <- as.numeric(sprintf("%s.%s%s", vern[1], vern[2], vern[3]))
if(vern < 2.52)
warning(sprintf("Orthofinder >= 2.5.2 must be installed (path is to version %s)\n\tAssuming orthofinder will be run outside of R with v2.5.2 or later\n", ver))
}
}
}
return(path)
}
check_orthofinderInstall("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin")
path = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin"
path <- path.expand(path)
wh <- Sys.which(as.character(path))
ex <- file.exists(path)
wh <- Sys.which(as.character(path))
?Sys.which
Sys.which("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin")
Sys.which("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder")
check_orthofinderInstall("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder")
check_orthofinderInstall("/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder")
path = "/Users/kuowenhsi/miniconda3/envs/orthofinder/bin/orthofinder"
path <- path.expand(path)
wh <- Sys.which(as.character(path))
ex <- file.exists(path)
ver <- tryCatch(
suppressWarnings(system2(path, "-h", stdout = TRUE, stderr = TRUE)),
error = function(err) NA)
ver
system2(path, "-h", stdout = TRUE, stderr = TRUE))
system2(path, "-h", stdout = TRUE, stderr = TRUE)
system2(path, "-h")
system2("/Users/kuowenhsi/OrthoFinder/orthofinder.py", "-h")
system2("/Users/kuowenhsi/OrthoFinder/orthofinder.py", "-h")
citation()
library(vcfR)
library(tidyverse)
setwd("/Users/kuowenhsi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/MOBOT/MOBOT_Boltonia")
# --- INPUT FILES ---
vcf_file <- "/Users/kuowenhsi/Library/CloudStorage/OneDrive-MissouriBotanicalGarden/General - IMLS National Leadership Grant 2023/Genotyping/Boltonia/Boltonia_functional_snps.vcf.gz"
# --- LOAD VCF ---
vcf <- read.vcfR(vcf_file)
# Extract genotype matrix
gt <- extract.gt(vcf, element = "GT", as.numeric = FALSE)
head(gt)
# Convert GT to allele counts (0, 1, 2)
gt_counts <- apply(gt, 2, function(x) {
sapply(x, function(g) {
if (is.na(g) || g %in% c("./.", ".")) return(NA)
alleles <- unlist(strsplit(g, "[/|]"))
sum(as.numeric(alleles))
})
})
# Calculate allele frequencies per SNP
allele_freqs <- apply(gt_counts, 2, function(geno) {
allele_sum <- sum(geno, na.rm = TRUE)
total_alleles <- 2 * sum(!is.na(geno))
freq_alt <- allele_sum / total_alleles
freq_ref <- 1 - freq_alt
c(ref = freq_ref, alt = freq_alt)
})
# Determine minor allele per site
minor_allele_is_alt <- allele_freqs["alt", ] <= allele_freqs["ref", ]
# For each SNP, count minor alleles per individual
minor_allele_matrix <- mapply(function(col, is_alt_minor) {
if (is_alt_minor) {
return(gt_counts[, col])  # alt allele count is minor
} else {
return(2 - gt_counts[, col])  # ref allele count is minor
}
}, col = seq_along(minor_allele_is_alt), is_alt_minor = minor_allele_is_alt)
minor_allele_matrix <- as.data.frame(t(minor_allele_matrix))
rownames(minor_allele_matrix) <- colnames(gt_counts)
colnames(minor_allele_matrix) <- rownames(gt_counts)
# Total genetic load per individual (sum of minor alleles)
genetic_load <- colSums(minor_allele_matrix, na.rm = TRUE)
genetic_load_df <- tibble(sample = names(genetic_load),
genetic_load = genetic_load)
head(genetic_load_df)
head(genetic_load)
head(minor_allele_matrix)
minor_allele_matrix[1:10, 1:10]
head(genetic_load)
colSums
?colSums
# Total genetic load per individual (sum of minor alleles)
genetic_load <- rowSums(minor_allele_matrix, na.rm = TRUE)
head(genetic_load)
minor_allele_matrix[1:10, 1:10]
head(genetic_load)
genetic_load_df <- tibble(sample = names(genetic_load),
genetic_load = genetic_load)
head(genetic_load_df)
Boltonia_data <- read_csv("./data/Boltonia_merged_data_20240925.csv") %>%
mutate(Adapted_Longitude = case_when(is.na(Longitude) ~ Google_longitude, TRUE ~ Longitude), Adapted_Latitude = case_when(is.na(Latitude) ~ Google_latitude, TRUE ~ Latitude))
View(Boltonia_data)
Boltonia_data <- read_csv("./data/Boltonia_merged_data_20240925.csv") %>%
mutate(Adapted_Longitude = case_when(is.na(Longitude) ~ Google_longitude, TRUE ~ Longitude), Adapted_Latitude = case_when(is.na(Latitude) ~ Google_latitude, TRUE ~ Latitude))%>%
dplyr::select(Sample_Name = index, County, Population = MaternalLine, Adapted_Longitude, Adapted_Latitude) %>%
mutate(Sample_Name = paste("Boltonia", str_pad(Sample_Name, 3, pad = "0"), sep = "_"))
popmap <- read_csv("./data/Boltonia_merged_data_20240925.csv") %>%
mutate(Adapted_Longitude = case_when(is.na(Longitude) ~ Google_longitude, TRUE ~ Longitude), Adapted_Latitude = case_when(is.na(Latitude) ~ Google_latitude, TRUE ~ Latitude))%>%
dplyr::select(Sample_Name = index, County, Population = MaternalLine, Adapted_Longitude, Adapted_Latitude) %>%
mutate(Sample_Name = paste("Boltonia", str_pad(Sample_Name, 3, pad = "0"), sep = "_"))
head(genetic_load_df)
# Merge and summarize by population
genetic_load_merged <- left_join(genetic_load_df, popmap, by = c("sample" = "Sample_Name"))
View(genetic_load_merged)
load_summary <- genetic_load_merged %>%
group_by(Population) %>%
summarise(mean_load = mean(genetic_load),
sd_load = sd(genetic_load),
n = n(),
se_load = sd_load / sqrt(n))
View(load_summary)
load_summary <- genetic_load_merged %>%
group_by(County, Population) %>%
summarise(mean_load = mean(genetic_load),
sd_load = sd(genetic_load),
n = n(),
se_load = sd_load / sqrt(n))
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
theme_minimal()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
theme_bwl()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
theme_bw()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
facet_wrap(.~County)
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
facet_wrap(.~County, scales = "free_x", nrow = 1)+
theme_bw()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
ggh4x::facet_nested(.~County, scales = "free_x",  space = "free_x",nrow = 1)+
theme_bw()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
ggh4x::facet_nested(.~County, scales = "free_x",  space = "free_x")+
theme_bw()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
ggh4x::facet_nested(.~reorder(County, Adapted_Latitude), scales = "free_x",  space = "free_x")+
theme_bw()
ggsave("General_genetic_load_per_population.png", width = 8, height = 4, dpi = 600)
ggsave("General_genetic_load_per_population.png", width = 12, height = 5, dpi = 600)
head(genetic_load_df)
minor_allele_matrix[1:10, 1:10]
Realized_load <- t(genetic_load_df)
Realized_load[1:10. 1:10]
Realized_load[1:10, 1:10]
Realized_load
Realized_load <- as.matrix(genetic_load_df) %>% t()
Realized_load[1:10, 1:10]
head(genetic_load_df)
Realized_load <- t(minor_allele_matrix)
Realized_load[1:10, 1:10]
class(Realized_load)
?as_tibble.matrix
Realized_load <- t(minor_allele_matrix)%>%
as_tibble(rownames = "Sites")
Realized_load[1:10, 1:10]
class(Realized_load)
minor_allele_matrix[1:10, 1:10]
Realized_load <- t(minor_allele_matrix)%>%
as_tibble()%>%
mutate_all(.funs = function(x){sum(x)/2 * (sum(x != 0))})
Realized_load[1:10, 1:10]
Realized_load <- t(minor_allele_matrix)%>%
as_tibble()%>%
summarize_all(.funs = function(x){sum(x)/(2 * (sum(x != 0)))})
Realized_load[1:10, 1:10]
Realized_load <- t(minor_allele_matrix)%>%
as_tibble()%>%
summarize_all(.funs = function(x){sum(x)/(2 * (sum(x != 0)))})%>%
pivot_longer(names_to = "Sample", values_to = "Realized_load")
Realized_load
Realized_load <- t(minor_allele_matrix)%>%
as_tibble()%>%
summarize_all(.funs = function(x){sum(x)/(2 * (sum(x != 0)))})%>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Realized_load")
Realized_load[1:10, 1:10]
class(Realized_load)
Realized_load
# Merge and summarize by population
genetic_load_merged <- left_join(Realized_load, popmap, by = c("sample" = "Sample_Name"))
# Merge and summarize by population
genetic_load_merged <- left_join(Realized_load, popmap, by = c("Sample" = "Sample_Name"))
load_summary <- genetic_load_merged %>%
group_by(County, Population) %>%
summarise(mean_load = mean(genetic_load),
sd_load = sd(genetic_load),
n = n(),
se_load = sd_load / sqrt(n))
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
ggh4x::facet_nested(.~reorder(County, Adapted_Latitude), scales = "free_x",  space = "free_x")+
theme_bw()
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = genetic_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
ggh4x::facet_nested(.~reorder(County, Adapted_Latitude), scales = "free_x",  space = "free_x")+
theme_bw()
genetic_load_merged
# --- OPTIONAL: PLOT ---
ggplot(genetic_load_merged, aes(x = Population, y = Realized_load)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Genetic Load per Population (Functional SNPs)",
y = "Minor Allele Count (Load)", x = "Population") +
ggh4x::facet_nested(.~reorder(County, Adapted_Latitude), scales = "free_x",  space = "free_x")+
theme_bw()
minor_allele_matrix[1:10, 1:10]
View(popmap)
write_tsv(genetic_load_merged%>% select(Sample, Population), col_names = FALSE, "popmap.txt")
unique(genetic_load_merged$Population)
length(unique(genetic_load_merged$Population))
